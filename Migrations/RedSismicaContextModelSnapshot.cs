// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RedSismica.Data;

#nullable disable

namespace RedSismica.Migrations
{
    [DbContext(typeof(RedSismicaContext))]
    partial class RedSismicaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.0");

            modelBuilder.Entity("RedSismica.Models.CambioEstado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EstadoId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MotivoFueraServicioId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrdenDeInspeccionId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SismografoId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("fechaHoraFin")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fechaHoraInicio")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("EstadoId");

                    b.HasIndex("MotivoFueraServicioId");

                    b.HasIndex("OrdenDeInspeccionId");

                    b.HasIndex("SismografoId");

                    b.ToTable("CambiosEstado");
                });

            modelBuilder.Entity("RedSismica.Models.Empleado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("RolId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("apellido")
                        .HasColumnType("TEXT");

                    b.Property<string>("mail")
                        .HasColumnType("TEXT");

                    b.Property<string>("nombre")
                        .HasColumnType("TEXT");

                    b.Property<string>("telefono")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RolId");

                    b.ToTable("Empleados");
                });

            modelBuilder.Entity("RedSismica.Models.EstacionSismologica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EstadoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SismografoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("codigoEstacion")
                        .HasColumnType("TEXT");

                    b.Property<string>("documentoCertificacionAdquirida")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fechaSolicitudCertificacion")
                        .HasColumnType("TEXT");

                    b.Property<double>("latitud")
                        .HasColumnType("REAL");

                    b.Property<double>("longitud")
                        .HasColumnType("REAL");

                    b.Property<string>("nombre")
                        .HasColumnType("TEXT");

                    b.Property<string>("nroCertificacionAdquisicion")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EstadoId");

                    b.ToTable("Estaciones");
                });

            modelBuilder.Entity("RedSismica.Models.Estado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ambito")
                        .HasColumnType("TEXT");

                    b.Property<string>("nombreEstado")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Estados");
                });

            modelBuilder.Entity("RedSismica.Models.MotivoFueraServicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MotivoTipoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("comentario")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MotivoTipoId");

                    b.ToTable("MotivosFueraServicio");
                });

            modelBuilder.Entity("RedSismica.Models.MotivoTipo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descripcion")
                        .HasColumnType("TEXT");

                    b.Property<string>("tipoMotivo")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MotivosTipo");
                });

            modelBuilder.Entity("RedSismica.Models.OrdenDeInspeccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EstacionSismologicaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EstadoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ObservacionCierre")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("fechaHoraCierre")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fechaHoraFinalizacion")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fechaHoraInicio")
                        .HasColumnType("TEXT");

                    b.Property<string>("nroOrden")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("EstacionSismologicaId");

                    b.HasIndex("EstadoId");

                    b.ToTable("OrdenesInspeccion");
                });

            modelBuilder.Entity("RedSismica.Models.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("descripcion")
                        .HasColumnType("TEXT");

                    b.Property<string>("nombre")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("RedSismica.Models.Sesion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("fechaHoraDesde")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("fechaHoraHasta")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Sesiones");
                });

            modelBuilder.Entity("RedSismica.Models.Sismografo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EstacionSismologicaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EstadoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IdentificacionSismografo")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("fechaAdquisicion")
                        .HasColumnType("TEXT");

                    b.Property<string>("nroSerie")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EstacionSismologicaId")
                        .IsUnique();

                    b.HasIndex("EstadoId");

                    b.ToTable("Sismografos");
                });

            modelBuilder.Entity("RedSismica.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("contraseña")
                        .HasColumnType("TEXT");

                    b.Property<string>("nombreUsuario")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmpleadoId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("RedSismica.Models.CambioEstado", b =>
                {
                    b.HasOne("RedSismica.Models.Empleado", "empleado")
                        .WithMany()
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RedSismica.Models.Estado", "estadoActual")
                        .WithMany()
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RedSismica.Models.MotivoFueraServicio", "motivoFueraServicio")
                        .WithMany()
                        .HasForeignKey("MotivoFueraServicioId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RedSismica.Models.OrdenDeInspeccion", "OrdenDeInspeccion")
                        .WithMany("CambiosEstado")
                        .HasForeignKey("OrdenDeInspeccionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RedSismica.Models.Sismografo", null)
                        .WithMany("CambiosEstado")
                        .HasForeignKey("SismografoId");

                    b.Navigation("OrdenDeInspeccion");

                    b.Navigation("empleado");

                    b.Navigation("estadoActual");

                    b.Navigation("motivoFueraServicio");
                });

            modelBuilder.Entity("RedSismica.Models.Empleado", b =>
                {
                    b.HasOne("RedSismica.Models.Rol", "rol")
                        .WithMany()
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("rol");
                });

            modelBuilder.Entity("RedSismica.Models.EstacionSismologica", b =>
                {
                    b.HasOne("RedSismica.Models.Estado", "estadoActual")
                        .WithMany()
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("estadoActual");
                });

            modelBuilder.Entity("RedSismica.Models.MotivoFueraServicio", b =>
                {
                    b.HasOne("RedSismica.Models.MotivoTipo", "motivoTipo")
                        .WithMany()
                        .HasForeignKey("MotivoTipoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("motivoTipo");
                });

            modelBuilder.Entity("RedSismica.Models.OrdenDeInspeccion", b =>
                {
                    b.HasOne("RedSismica.Models.Empleado", "Empleado")
                        .WithMany("OrdenesInspeccion")
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RedSismica.Models.EstacionSismologica", "Estacion")
                        .WithMany()
                        .HasForeignKey("EstacionSismologicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RedSismica.Models.Estado", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empleado");

                    b.Navigation("Estacion");

                    b.Navigation("Estado");
                });

            modelBuilder.Entity("RedSismica.Models.Sesion", b =>
                {
                    b.HasOne("RedSismica.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("RedSismica.Models.Sismografo", b =>
                {
                    b.HasOne("RedSismica.Models.EstacionSismologica", "estacion")
                        .WithOne("Sismografo")
                        .HasForeignKey("RedSismica.Models.Sismografo", "EstacionSismologicaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RedSismica.Models.Estado", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Estado");

                    b.Navigation("estacion");
                });

            modelBuilder.Entity("RedSismica.Models.Usuario", b =>
                {
                    b.HasOne("RedSismica.Models.Empleado", "Empleado")
                        .WithMany()
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Empleado");
                });

            modelBuilder.Entity("RedSismica.Models.Empleado", b =>
                {
                    b.Navigation("OrdenesInspeccion");
                });

            modelBuilder.Entity("RedSismica.Models.EstacionSismologica", b =>
                {
                    b.Navigation("Sismografo");
                });

            modelBuilder.Entity("RedSismica.Models.OrdenDeInspeccion", b =>
                {
                    b.Navigation("CambiosEstado");
                });

            modelBuilder.Entity("RedSismica.Models.Sismografo", b =>
                {
                    b.Navigation("CambiosEstado");
                });
#pragma warning restore 612, 618
        }
    }
}
