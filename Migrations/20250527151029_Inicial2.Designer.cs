// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RedSismica.Data;

#nullable disable

namespace RedSismica.Migrations
{
    [DbContext(typeof(RedSismicaContext))]
    [Migration("20250527151029_Inicial2")]
    partial class Inicial2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.0");

            modelBuilder.Entity("RedSismica.Models.CambioEstadoSismografo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Estado")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaHoraCambio")
                        .HasColumnType("TEXT");

                    b.Property<int>("SismografoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("SismografoId");

                    b.ToTable("CambiosEstadoSismografo");
                });

            modelBuilder.Entity("RedSismica.Models.Empleado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .HasColumnType("TEXT");

                    b.Property<string>("Rol")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Empleados");
                });

            modelBuilder.Entity("RedSismica.Models.EstacionSismologica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .HasColumnType("TEXT");

                    b.Property<string>("Ubicacion")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Estaciones");
                });

            modelBuilder.Entity("RedSismica.Models.MotivoBajaSismografo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comentario")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrdenInspeccionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TipoMotivoBajaId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrdenInspeccionId");

                    b.HasIndex("TipoMotivoBajaId");

                    b.ToTable("MotivosBajaSismografo");
                });

            modelBuilder.Entity("RedSismica.Models.OrdenInspeccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EstaCerrada")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EstacionSismologicaId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("FechaCierre")
                        .HasColumnType("TEXT");

                    b.Property<string>("ObservacionCierre")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmpleadoId");

                    b.HasIndex("EstacionSismologicaId");

                    b.ToTable("OrdenesInspeccion");
                });

            modelBuilder.Entity("RedSismica.Models.Sismografo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EstacionSismologicaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Estado")
                        .HasColumnType("TEXT");

                    b.Property<string>("Identificador")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EstacionSismologicaId")
                        .IsUnique();

                    b.ToTable("Sismografos");
                });

            modelBuilder.Entity("RedSismica.Models.TipoMotivoBaja", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descripcion")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TiposMotivoBaja");
                });

            modelBuilder.Entity("RedSismica.Models.CambioEstadoSismografo", b =>
                {
                    b.HasOne("RedSismica.Models.Empleado", "Responsable")
                        .WithMany()
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RedSismica.Models.Sismografo", "Sismografo")
                        .WithMany("CambiosEstado")
                        .HasForeignKey("SismografoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Responsable");

                    b.Navigation("Sismografo");
                });

            modelBuilder.Entity("RedSismica.Models.MotivoBajaSismografo", b =>
                {
                    b.HasOne("RedSismica.Models.OrdenInspeccion", "OrdenInspeccion")
                        .WithMany("MotivosBaja")
                        .HasForeignKey("OrdenInspeccionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RedSismica.Models.TipoMotivoBaja", "Tipo")
                        .WithMany()
                        .HasForeignKey("TipoMotivoBajaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrdenInspeccion");

                    b.Navigation("Tipo");
                });

            modelBuilder.Entity("RedSismica.Models.OrdenInspeccion", b =>
                {
                    b.HasOne("RedSismica.Models.Empleado", "Empleado")
                        .WithMany("OrdenesInspeccion")
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RedSismica.Models.EstacionSismologica", "EstacionSismologica")
                        .WithMany()
                        .HasForeignKey("EstacionSismologicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empleado");

                    b.Navigation("EstacionSismologica");
                });

            modelBuilder.Entity("RedSismica.Models.Sismografo", b =>
                {
                    b.HasOne("RedSismica.Models.EstacionSismologica", "EstacionSismologica")
                        .WithOne("Sismografo")
                        .HasForeignKey("RedSismica.Models.Sismografo", "EstacionSismologicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EstacionSismologica");
                });

            modelBuilder.Entity("RedSismica.Models.Empleado", b =>
                {
                    b.Navigation("OrdenesInspeccion");
                });

            modelBuilder.Entity("RedSismica.Models.EstacionSismologica", b =>
                {
                    b.Navigation("Sismografo");
                });

            modelBuilder.Entity("RedSismica.Models.OrdenInspeccion", b =>
                {
                    b.Navigation("MotivosBaja");
                });

            modelBuilder.Entity("RedSismica.Models.Sismografo", b =>
                {
                    b.Navigation("CambiosEstado");
                });
#pragma warning restore 612, 618
        }
    }
}
